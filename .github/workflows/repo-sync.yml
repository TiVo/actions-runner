name: Repo Sync

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  WORKING_BRANCH: 'tivo-build'

jobs:
  get-runner-versions:
    name: "Compare tivo/actions-runner and upstream release versions"
    runs-on: ubuntu-latest
    outputs:
      runner_version_mismatch: ${{ steps.compare_runner_versions.outputs.runner_version_mismatch }}
      runner_version_upstream: ${{ steps.get_upstream_ver.outputs.runner_version }}
      runner_version_tivo: ${{ steps.get_tivo_ver.outputs.runner_version }}
    steps:
      - name: Get version number of latest actions/runner release
        id: get_upstream_ver
        run: |
          UPSTREAM_VER=$(curl -sL https://api.github.com/repos/actions/runner/releases/latest | jq -r .tag_name | cut -c2-)
          echo "GH_RUNNER_VERSION_UPSTREAM=$UPSTREAM_VER" >> $GITHUB_ENV
          echo "runner_version=$UPSTREAM_VER" >> $GITHUB_OUTPUT

      - name: Get version number of latest tivo/actions-runner release
        id: get_tivo_ver
        run: |
          TIVO_VER=$(curl -sL https://api.github.com/repos/tivo/actions-runner/releases/latest | jq -r .tag_name | cut -c2-)
          echo "GH_RUNNER_VERSION_TIVO=$TIVO_VER" >> $GITHUB_ENV
          echo "runner_version=$TIVO_VER" >> $GITHUB_OUTPUT
      
      - name: Compare release versions
        id: compare_runner_versions
        run: |
          [[ "${{ env.GH_RUNNER_VERSION_UPSTREAM }}" != "${{ env.GH_RUNNER_VERSION_TIVO }}" ]] \
          && echo "runner_version_mismatch=true" >> $GITHUB_OUTPUT \
          || echo "runner_version_mismatch=false" >> $GITHUB_OUTPUT

  upstream-sync:
    name: "Sync upstream changes to tivo-build branch"
    if: needs.get-runner-versions.outputs.runner_version_mismatch == 'true'
    needs: get-runner-versions
    runs-on: ubuntu-latest
    env:
      GH_RUNNER_VERSION_MISMATCH: ${{ needs.get-runner-versions.outputs.runner_version_mismatch }}
      GH_RUNNER_VERSION_UPSTREAM: ${{ needs.get-runner-versions.outputs.runner_version_upstream }}
      GH_RUNNER_VERSION_TIVO: ${{ needs.get-runner-versions.outputs.runner_version_tivo }}
    steps:
      - name: Perform checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.WORKING_BRANCH }}
      - name: Sync upstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          target_sync_branch: ${{ env.WORKING_BRANCH }}
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}
          upstream_sync_branch: v${{ env.GH_RUNNER_VERSION_UPSTREAM }}
          upstream_sync_repo: actions/runner
          upstream_repo_access_token: ${{ secrets.TIVOBOT_GITHUB_ACTION_TOKEN }}
          upstream_pull_args: '-s recursive -Xtheirs' # overwrite everything in tivo-build branch
          test_mode: false

  code-changes:
    name: "Code changes"
    if: ${{ !github.event.act }}
    needs: [get-runner-versions, upstream-sync]
    runs-on: ubuntu-latest
    steps:
      - name: Perform checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.WORKING_BRANCH }}
      - name: Perform code changes
        # The following code changes will disable the docker-in-docker checks found in ./src/Runner.Worker/ContainerOperationProvider.cs 
        # and fixes a git command path issue in ./src/dir.proj
        run: |
          if [[ ! $(egrep "^\/\/\s+ServiceController\[\] scServices = ServiceController.GetServices\(\);" src/Runner.Worker/ContainerOperationProvider.cs) ]]; then
            sed -i -e "/ServiceController\[\] scServices = ServiceController.GetServices();/,+4 s/^/\/\//" src/Runner.Worker/ContainerOperationProvider.cs
          fi && 
          if [[ ! $(egrep "^\/\/\s+var initProcessCgroup = File.ReadLines\(\"\/proc\/1\/cgroup\"\);" src/Runner.Worker/ContainerOperationProvider.cs) ]]; then 
            sed -i -e "/var initProcessCgroup = File.ReadLines(\"\/proc\/1\/cgroup\");/,+4 s/^/\/\//" src/Runner.Worker/ContainerOperationProvider.cs; 
          fi
          if [[ ! $(grep "git update-index --assume-unchanged ./Runner.Sdk/BuildConstants.cs/" src/dir.proj) ]]; then
            sed -i 's/git update-index --assume-unchanged .\/Runner.Sdk\/BuildConstants.cs/&\//' src/dir.proj;
          fi
      - name: Commit changes to ${{ env.WORKING_BRANCH }}
        uses: EndBug/add-and-commit@v9
        with:
          message: "[Automated] rm Docker-in-Docker check and fix git cmd build issue"
          add: '["src/Runner.Worker/ContainerOperationProvider.cs", "src/dir.proj"]'

  # check:
  #   if: ${{ !github.event.act }}
  #   needs: [get-runner-versions, upstream-sync, code-changes]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       ref: ${{ env.WORKING_BRANCH }}

  #   # Make sure ./releaseVersion match ./src/runnerversion
  #   # Query GitHub release ensure version is not used
  #   - name: Check version
  #     uses: actions/github-script@0.3.0
  #     with:
  #       github-token: ${{secrets.GITHUB_TOKEN}}
  #       script: |
  #         const core = require('@actions/core')
  #         const fs = require('fs');
  #         const runnerVersion = fs.readFileSync('${{ github.workspace }}/src/runnerversion', 'utf8').replace(/\n$/g, '')
  #         const releaseVersion = fs.readFileSync('${{ github.workspace }}/releaseVersion', 'utf8').replace(/\n$/g, '')
  #         if (runnerVersion != releaseVersion) {
  #           console.log('Request Release Version: ' + releaseVersion + '\nCurrent Runner Version: ' + runnerVersion)
  #           core.setFailed('Version mismatch! Make sure ./releaseVersion match ./src/runnerVersion')
  #           return
  #         }
  #         try {
  #           const release = await github.repos.getReleaseByTag({
  #             owner: '${{ github.event.repository.owner.name }}',
  #             repo: '${{ github.event.repository.name }}',
  #             tag: 'v' + runnerVersion
  #           })
  #           core.setFailed('Release with same tag already created: ' + release.data.html_url)
  #         } catch (e) {
  #           // We are good to create the release if release with same tag doesn't exists
  #           if (e.status != 404) {
  #             throw e
  #           }
  #         }

  # build:
  #   if: needs.get-runner-versions.outputs.runner_version_mismatch == 'true'
  #   needs: [get-runner-versions, upstream-sync, code-changes, check]
  #   outputs:
  #     linux-x64-sha: ${{ steps.sha.outputs.linux-x64-sha256 }}
  #   strategy:
  #     matrix:
  #       runtime: [ linux-x64 ]
  #       include:
  #       - runtime: linux-x64
  #         os: ubuntu-latest
  #         devScript: ./dev.sh

  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       ref: ${{ env.WORKING_BRANCH }}

  #   # Build runner layout
  #   - name: Build & Layout Release
  #     run: |
  #       ${{ matrix.devScript }} layout Release ${{ matrix.runtime }}
  #     working-directory: src

  #   # Create runner package tar.gz/zip
  #   - name: Package Release
  #     if: github.event_name != 'pull_request'
  #     run: |
  #       ${{ matrix.devScript }} package Release ${{ matrix.runtime }}
  #     working-directory: src

  #   # compute shas and set as job outputs to use in release notes
  #   - run: brew install coreutils #needed for shasum util
  #     if: ${{ matrix.os == 'macOS-latest' }}
  #     name: Install Dependencies for SHA Calculation (osx)
  #   - run: |
  #       file=$(ls)
  #       sha=$(sha256sum $file | awk '{ print $1 }')
  #       echo "Computed sha256: $sha for $file"
  #       echo "${{matrix.runtime}}-sha256=$sha" >> $GITHUB_OUTPUT
  #     shell: bash
  #     id: sha
  #     name: Compute SHA256
  #     working-directory: _package

  #   # Upload runner package tar.gz/zip as artifact.
  #   # Since each package name is unique, so we don't need to put ${{matrix}} info into artifact name
  #   - name: Publish Artifact
  #     if: github.event_name != 'pull_request'
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: runner-packages
  #       path: |
  #         _package

  # release:
  #   if: needs.get-runner-versions.outputs.runner_version_mismatch == 'true'
  #   needs: [get-runner-versions, upstream-sync, code-changes, check, build]
  #   runs-on: ubuntu-latest
  #   steps:

  #   - uses: actions/checkout@v3
  #     with:
  #       ref: ${{ env.WORKING_BRANCH }}

  #   # Download runner package tar.gz/zip produced by 'build' job
  #   - name: Download Artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: runner-packages
  #       path: ./

  #   # Create ReleaseNote file
  #   - name: Create ReleaseNote
  #     id: releaseNote
  #     uses: actions/github-script@0.3.0
  #     with:
  #       github-token: ${{secrets.GITHUB_TOKEN}}
  #       script: |
  #         const core = require('@actions/core')
  #         const fs = require('fs');
  #         const runnerVersion = fs.readFileSync('${{ github.workspace }}/src/runnerversion', 'utf8').replace(/\n$/g, '')
  #         var releaseNote = fs.readFileSync('${{ github.workspace }}/releaseNote.md', 'utf8').replace(/<RUNNER_VERSION>/g, runnerVersion)
  #         releaseNote = releaseNote.replace(/<LINUX_X64_SHA>/g, '${{needs.build.outputs.linux-x64-sha}}')
  #         console.log(releaseNote)
  #         core.setOutput('version', runnerVersion);
  #         core.setOutput('note', releaseNote);

  #   - name: Validate Packages HASH
  #     # working-directory: _package
  #     run: |
  #       ls -l
  #       echo "${{needs.build.outputs.linux-x64-sha}}  actions-runner-linux-x64-${{ steps.releaseNote.outputs.version }}.tar.gz" | shasum -a 256 -c

  #   # Create GitHub release
  #   - uses: actions/create-release@master
  #     id: createRelease
  #     name: Create ${{ steps.releaseNote.outputs.version }} Runner Release
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: "v${{ steps.releaseNote.outputs.version }}"
  #       release_name: "v${{ steps.releaseNote.outputs.version }}"
  #       body: |
  #         ${{ steps.releaseNote.outputs.note }}

  #   # Upload release assets (full runner packages)
  #   - name: Upload Release Asset (linux-x64)
  #     uses: actions/upload-release-asset@v1.0.1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.createRelease.outputs.upload_url }}
  #       asset_path: ${{ github.workspace }}/actions-runner-linux-x64-${{ steps.releaseNote.outputs.version }}.tar.gz
  #       asset_name: actions-runner-linux-x64-${{ steps.releaseNote.outputs.version }}.tar.gz
  #       asset_content_type: application/octet-stream
