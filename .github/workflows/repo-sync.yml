name: Repo Sync

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  WORKING_BRANCH: 'tivo-build'

jobs:
  get-runner-versions:
    name: "Compare tivo/actions-runner and upstream release versions"
    runs-on: ubuntu-latest
    outputs:
      runner_version_mismatch: ${{ steps.compare_runner_versions.outputs.runner_version_mismatch }}
      runner_version_upstream: ${{ steps.get_upstream_ver.outputs.runner_version }}
      runner_version_tivo: ${{ steps.get_tivo_ver.outputs.runner_version }}
      runner_upstream_branch: ${{ steps.get_upstream_ver.outputs.upstream_branch}}
    steps:
      - name: Get version number of latest actions/runner release
        id: get_upstream_ver
        run: |
          UPSTREAM_VER=$(curl -sL https://api.github.com/repos/actions/runner/releases/latest | jq -r .tag_name | cut -c2-)
          echo "GH_RUNNER_VERSION_UPSTREAM=$UPSTREAM_VER" >> $GITHUB_ENV
          echo "upstream_branch=releases/m$(echo $UPSTREAM_VER | awk -F '.' '{print ($3 == "0" ? $2 : $2 "." $3)}' -)" >> $GITHUB_OUTPUT
          echo "runner_version=$UPSTREAM_VER" >> $GITHUB_OUTPUT

      - name: Get version number of latest tivo/actions-runner release
        id: get_tivo_ver
        run: |
          TIVO_VER=$(curl -sL https://api.github.com/repos/tivo/actions-runner/releases/latest | jq -r .tag_name | cut -c2-)
          echo "GH_RUNNER_VERSION_TIVO=$TIVO_VER" >> $GITHUB_ENV
          echo "runner_version=$TIVO_VER" >> $GITHUB_OUTPUT
      
      - name: Compare release versions
        id: compare_runner_versions
        run: |
          [[ "${{ env.GH_RUNNER_VERSION_UPSTREAM }}" != "${{ env.GH_RUNNER_VERSION_TIVO }}" ]] \
          && echo "runner_version_mismatch=true" >> $GITHUB_OUTPUT \
          || echo "runner_version_mismatch=false" >> $GITHUB_OUTPUT

  upstream-sync:
    name: "Sync upstream changes to tivo-build branch"
    if: needs.get-runner-versions.outputs.runner_version_mismatch == 'true'
    needs: get-runner-versions
    runs-on: ubuntu-latest
    env:
      GH_RUNNER_VERSION_MISMATCH: ${{ needs.get-runner-versions.outputs.runner_version_mismatch }}
      GH_RUNNER_VERSION_UPSTREAM: ${{ needs.get-runner-versions.outputs.runner_version_upstream }}
      GH_RUNNER_VERSION_TIVO: ${{ needs.get-runner-versions.outputs.runner_version_tivo }}
      GH_RUNNER_UPSTREAM_BRANCH: ${{ needs.get-runner-versions.outputs.runner_upstream_branch }}
    steps:
      - name: Perform checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.WORKING_BRANCH }}
      - name: Sync upstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          target_sync_branch: ${{ env.WORKING_BRANCH }}
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}
          upstream_sync_branch: ${{ env.GH_RUNNER_UPSTREAM_BRANCH }}
          upstream_sync_repo: actions/runner
          upstream_repo_access_token: ${{ secrets.TIVOBOT_GITHUB_ACTION_TOKEN }}
          upstream_pull_args: '-s recursive -Xtheirs' # overwrite everything in tivo-build branch
          test_mode: false

  code-changes:
    name: "Code changes"
    needs: [get-runner-versions, upstream-sync]
    runs-on: ubuntu-latest
    steps:
      - name: Perform checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.WORKING_BRANCH }}
      - name: Perform code changes
        # The following code changes will disable the docker-in-docker checks found in ./src/Runner.Worker/ContainerOperationProvider.cs 
        # and fixes a git command path issue in ./src/dir.proj
        run: |
          if [[ ! $(egrep "^\/\/\s+ServiceController\[\] scServices = ServiceController.GetServices\(\);" src/Runner.Worker/ContainerOperationProvider.cs) ]]; then
            sed -i -e "/ServiceController\[\] scServices = ServiceController.GetServices();/,+4 s/^/\/\//" src/Runner.Worker/ContainerOperationProvider.cs
          fi && 
          if [[ ! $(egrep "^\/\/\s+var initProcessCgroup = File.ReadLines\(\"\/proc\/1\/cgroup\"\);" src/Runner.Worker/ContainerOperationProvider.cs) ]]; then 
            sed -i -e "/var initProcessCgroup = File.ReadLines(\"\/proc\/1\/cgroup\");/,+4 s/^/\/\//" src/Runner.Worker/ContainerOperationProvider.cs; 
          fi
          if [[ ! $(grep "git update-index --assume-unchanged ./Runner.Sdk/BuildConstants.cs/" src/dir.proj) ]]; then
            sed -i 's/git update-index --assume-unchanged .\/Runner.Sdk\/BuildConstants.cs/&\//' src/dir.proj;
          fi
      - name: Commit changes to ${{ env.WORKING_BRANCH }}
        uses: EndBug/add-and-commit@v9
        with:
          message: "[Automated] rm Docker-in-Docker check and fix git cmd build issue"
          add: '["src/Runner.Worker/ContainerOperationProvider.cs", "src/dir.proj"]'

  build-release:
    name: "Build and release action runner"
    needs: [get-runner-versions, upstream-sync, code-changes]
    uses: ./.github/workflows/release.yml
